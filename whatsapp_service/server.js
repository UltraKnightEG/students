/**
 * ุฎุฏูุฉ ุงููุงุชุณุงุจ ุงููุชูุฏูุฉ ููุธุงู ุฅุฏุงุฑุฉ ุญุถูุฑ ุงูุทูุงุจ
 * Advanced WhatsApp Service for Student Attendance System
 * 
 * ุงูููุฒุงุช:
 * - ุฅุฏุงุฑุฉ ุฌูุณุงุช ุงููุงุชุณุงุจ ุงููุชุนุฏุฏุฉ
 * - ุฅุฑุณุงู ุงูุฑุณุงุฆู ุงูุฌูุงุนูุฉ ูุงููุฑุฏูุฉ
 * - ุฅุฏุงุฑุฉ QR Code ููุงุชุตุงู
 * - ุชุณุฌูู ุดุงูู ููุฃูุดุทุฉ
 * - API ูุชูุงูู ูุน ุงููุธุงู ุงูุฑุฆูุณู
 * - ุฅุฏุงุฑุฉ ุงูุฃุฎุทุงุก ูุงูุงุณุชุซูุงุกุงุช
 * - ุฏุนู ุงูุฑุณุงุฆู ุงููุฌุฏููุฉ
 */

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const helmet = require('helmet');
const morgan = require('morgan');
const fs = require('fs-extra');
const path = require('path');
const moment = require('moment-timezone');
const QRCode = require('qrcode');
const winston = require('winston');
const cron = require('node-cron');
const axios = require('axios');
const venom = require('venom-bot');

// ุฅุนุฏุงุฏ ุงูููุทูุฉ ุงูุฒูููุฉ
moment.tz.setDefault('Asia/Riyadh');

// ุฅุนุฏุงุฏ ุงูุชุทุจูู
const app = express();
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

// ุฅุนุฏุงุฏ ุงููุฌูุฏุงุช
const SESSIONS_DIR = path.join(__dirname, 'sessions');
const LOGS_DIR = path.join(__dirname, 'logs');
const TEMP_DIR = path.join(__dirname, 'temp');

// ุฅูุดุงุก ุงููุฌูุฏุงุช ุงููุทููุจุฉ
fs.ensureDirSync(SESSIONS_DIR);
fs.ensureDirSync(LOGS_DIR);
fs.ensureDirSync(TEMP_DIR);

// ุฅุนุฏุงุฏ ูุธุงู ุงูุชุณุฌูู
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp({
            format: 'YYYY-MM-DD HH:mm:ss'
        }),
        winston.format.errors({ stack: true }),
        winston.format.json()
    ),
    defaultMeta: { service: 'whatsapp-service' },
    transports: [
        new winston.transports.File({ 
            filename: path.join(LOGS_DIR, 'error.log'), 
            level: 'error' 
        }),
        new winston.transports.File({ 
            filename: path.join(LOGS_DIR, 'combined.log') 
        }),
        new winston.transports.Console({
            format: winston.format.combine(
                winston.format.colorize(),
                winston.format.simple()
            )
        })
    ]
});

// ูุชุบูุฑุงุช ุงููุธุงู
let whatsappClient = null;
let isConnected = false;
let qrCode = null;
let connectionStatus = 'disconnected';
let messageQueue = [];
let processingQueue = false;

// ุฅุนุฏุงุฏ Express
app.use(helmet());
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));
app.use(morgan('combined', { stream: { write: message => logger.info(message.trim()) } }));

// ุฅุนุฏุงุฏ ูููุงุช ุซุงุจุชุฉ
app.use('/static', express.static(path.join(__dirname, 'public')));

/**
 * ูุฆุฉ ุฅุฏุงุฑุฉ ุงููุงุชุณุงุจ
 */
class WhatsAppManager {
    constructor() {
        this.client = null;
        this.isReady = false;
        this.sessionName = 'attendance-system';
        this.retryCount = 0;
        this.maxRetries = 3;
        this.messageHistory = [];
        this.scheduledMessages = [];
    }

    /**
     * ุจุฏุก ุฌูุณุฉ ุงููุงุชุณุงุจ
     */
    async startSession() {
        try {
            logger.info('ุจุฏุก ุชุดุบูู ุฌูุณุฉ ุงููุงุชุณุงุจ...');
            connectionStatus = 'connecting';

            this.client = await venom.create({
                session: this.sessionName,
                multidevice: true,
                folderNameToken: SESSIONS_DIR,
                headless: true,
                devtools: false,
                useChrome: true,
                debug: false,
                logQR: false,
                browserWS: '',
                browserArgs: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--single-process',
                    '--disable-gpu'
                ],
                refreshQR: 15000,
                autoClose: 60000,
                disableSpins: true,
                disableWelcome: true,
                updatesLog: false,
                createPathFileToken: true
            }, 
            // QR Code callback
            (base64Qr, asciiQR, attempts, urlCode) => {
                this.handleQRCode(base64Qr, asciiQR, attempts, urlCode);
            },
            // Status callback
            (statusSession, session) => {
                this.handleStatusChange(statusSession, session);
            });

            // ุฅุนุฏุงุฏ ูุนุงูุฌุงุช ุงูุฃุญุฏุงุซ
            this.setupEventHandlers();
            
            logger.info('ุชู ุชุดุบูู ุฌูุณุฉ ุงููุงุชุณุงุจ ุจูุฌุงุญ');
            return true;

        } catch (error) {
            logger.error('ุฎุทุฃ ูู ุชุดุบูู ุฌูุณุฉ ุงููุงุชุณุงุจ:', error);
            connectionStatus = 'error';
            
            if (this.retryCount < this.maxRetries) {
                this.retryCount++;
                logger.info(`ูุญุงููุฉ ุฅุนุงุฏุฉ ุงูุงุชุตุงู ${this.retryCount}/${this.maxRetries}...`);
                setTimeout(() => this.startSession(), 5000);
            }
            
            return false;
        }
    }

    /**
     * ูุนุงูุฌุฉ QR Code
     */
    handleQRCode(base64Qr, asciiQR, attempts, urlCode) {
        logger.info(`QR Code ุฌุฏูุฏ - ุงููุญุงููุฉ ${attempts}`);
        qrCode = base64Qr;
        connectionStatus = 'qr_ready';
        
        // ุญูุธ QR Code ูููู
        const qrPath = path.join(TEMP_DIR, 'qr-code.png');
        QRCode.toFile(qrPath, urlCode, (err) => {
            if (err) {
                logger.error('ุฎุทุฃ ูู ุญูุธ QR Code:', err);
            } else {
                logger.info('ุชู ุญูุธ QR Code ูู:', qrPath);
            }
        });
    }

    /**
     * ูุนุงูุฌุฉ ุชุบููุฑ ุญุงูุฉ ุงูุงุชุตุงู
     */
    handleStatusChange(statusSession, session) {
        logger.info(`ุชุบููุฑ ุญุงูุฉ ุงูุฌูุณุฉ: ${statusSession}`);
        
        switch (statusSession) {
            case 'successChat':
                connectionStatus = 'connected';
                isConnected = true;
                this.isReady = true;
                qrCode = null;
                this.retryCount = 0;
                logger.info('ุชู ุงูุงุชุตุงู ุจุงููุงุชุณุงุจ ุจูุฌุงุญ');
                this.startMessageProcessor();
                break;
                
            case 'qrReadSuccess':
                connectionStatus = 'authenticating';
                logger.info('ุชู ูุณุญ QR Code ุจูุฌุงุญุ ุฌุงุฑู ุงููุตุงุฏูุฉ...');
                break;
                
            case 'autocloseCalled':
            case 'desconnectedMobile':
                connectionStatus = 'disconnected';
                isConnected = false;
                this.isReady = false;
                logger.warn('ุชู ูุทุน ุงูุงุชุตุงู ูุน ุงููุงุชุณุงุจ');
                break;
                
            case 'serverClose':
                connectionStatus = 'error';
                isConnected = false;
                this.isReady = false;
                logger.error('ุฎุทุฃ ูู ุงูุฎุงุฏู');
                break;
        }
    }

    /**
     * ุฅุนุฏุงุฏ ูุนุงูุฌุงุช ุงูุฃุญุฏุงุซ
     */
    setupEventHandlers() {
        if (!this.client) return;

        // ูุนุงูุฌ ุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ
        this.client.onMessage((message) => {
            this.handleIncomingMessage(message);
        });

        // ูุนุงูุฌ ุญุงูุฉ ุงูุฑุณุงุฆู
        this.client.onAck((ack) => {
            this.handleMessageAck(ack);
        });

        // ูุนุงูุฌ ุงูุฃุฎุทุงุก
        this.client.onStateChange((state) => {
            logger.info(`ุชุบููุฑ ุญุงูุฉ ุงููุงุชุณุงุจ: ${state}`);
        });
    }

    /**
     * ูุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ
     */
    handleIncomingMessage(message) {
        logger.info('ุฑุณุงูุฉ ูุงุฑุฏุฉ:', {
            from: message.from,
            body: message.body,
            type: message.type
        });

        // ุญูุธ ุงูุฑุณุงูุฉ ูู ุงูุณุฌู
        this.messageHistory.push({
            id: message.id,
            from: message.from,
            to: message.to,
            body: message.body,
            type: message.type,
            timestamp: moment().format(),
            direction: 'incoming'
        });

        // ูุนุงูุฌุฉ ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ ุฅุฐุง ูุฒู ุงูุฃูุฑ
        this.handleAutoReply(message);
    }

    /**
     * ูุนุงูุฌุฉ ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ
     */
    async handleAutoReply(message) {
        // ูููู ุฅุถุงูุฉ ููุทู ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ ููุง
        // ูุซู ุงูุฑุฏ ุนูู ูููุงุช ููุชุงุญูุฉ ูุนููุฉ
        
        const body = message.body.toLowerCase().trim();
        
        if (body === 'ูุณุงุนุฏุฉ' || body === 'help') {
            await this.sendMessage(message.from, 
                'ูุฑุญุจุงู ุจู ูู ูุธุงู ุฅุฏุงุฑุฉ ุญุถูุฑ ุงูุทูุงุจ ๐\n\n' +
                'ููุญุตูู ุนูู ูุนูููุงุช ุญูู ุญุถูุฑ ุทูููุ ูุฑุฌู ุงูุชุธุงุฑ ุงูุชูุงุฑูุฑ ุงูููููุฉ.\n\n' +
                'ุดูุฑุงู ูู ๐'
            );
        }
    }

    /**
     * ูุนุงูุฌุฉ ุชุฃููุฏ ุงูุฑุณุงุฆู
     */
    handleMessageAck(ack) {
        logger.info('ุชุฃููุฏ ุงูุฑุณุงูุฉ:', {
            id: ack.id,
            ack: ack.ack,
            from: ack.from
        });

        // ุชุญุฏูุซ ุญุงูุฉ ุงูุฑุณุงูุฉ ูู ุงูุณุฌู
        const messageIndex = this.messageHistory.findIndex(msg => msg.id === ack.id);
        if (messageIndex !== -1) {
            this.messageHistory[messageIndex].ack = ack.ack;
            this.messageHistory[messageIndex].ackTime = moment().format();
        }
    }

    /**
     * ุฅุฑุณุงู ุฑุณุงูุฉ
     */
    async sendMessage(to, message, options = {}) {
        if (!this.isReady || !this.client) {
            throw new Error('ุงููุงุชุณุงุจ ุบูุฑ ูุชุตู');
        }

        try {
            // ุชูุณูู ุฑูู ุงููุงุชู
            const formattedNumber = this.formatPhoneNumber(to);
            
            // ุฅุฑุณุงู ุงูุฑุณุงูุฉ
            const result = await this.client.sendText(formattedNumber, message);
            
            logger.info('ุชู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุจูุฌุงุญ:', {
                to: formattedNumber,
                messageId: result.id
            });

            // ุญูุธ ุงูุฑุณุงูุฉ ูู ุงูุณุฌู
            this.messageHistory.push({
                id: result.id,
                from: 'system',
                to: formattedNumber,
                body: message,
                type: 'text',
                timestamp: moment().format(),
                direction: 'outgoing',
                status: 'sent'
            });

            return result;

        } catch (error) {
            logger.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ:', error);
            throw error;
        }
    }

    /**
     * ุฅุฑุณุงู ุฑุณุงูุฉ ูุน ุตูุฑุฉ
     */
    async sendImageMessage(to, imagePath, caption = '') {
        if (!this.isReady || !this.client) {
            throw new Error('ุงููุงุชุณุงุจ ุบูุฑ ูุชุตู');
        }

        try {
            const formattedNumber = this.formatPhoneNumber(to);
            const result = await this.client.sendImage(formattedNumber, imagePath, 'image', caption);
            
            logger.info('ุชู ุฅุฑุณุงู ุงูุตูุฑุฉ ุจูุฌุงุญ:', {
                to: formattedNumber,
                messageId: result.id
            });

            return result;

        } catch (error) {
            logger.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุตูุฑุฉ:', error);
            throw error;
        }
    }

    /**
     * ุฅุฑุณุงู ุฑุณุงุฆู ุฌูุงุนูุฉ
     */
    async sendBulkMessages(recipients, message, options = {}) {
        const results = [];
        const delay = options.delay || 2000; // ุชุฃุฎูุฑ ุจูู ุงูุฑุณุงุฆู

        for (const recipient of recipients) {
            try {
                const result = await this.sendMessage(recipient.phone, message);
                results.push({
                    recipient: recipient,
                    success: true,
                    messageId: result.id
                });

                // ุชุฃุฎูุฑ ุจูู ุงูุฑุณุงุฆู ูุชุฌูุจ ุงูุญุธุฑ
                if (delay > 0) {
                    await this.sleep(delay);
                }

            } catch (error) {
                logger.error(`ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุฅูู ${recipient.phone}:`, error);
                results.push({
                    recipient: recipient,
                    success: false,
                    error: error.message
                });
            }
        }

        return results;
    }

    /**
     * ุชูุณูู ุฑูู ุงููุงุชู
     */
    formatPhoneNumber(phone) {
        // ุฅุฒุงูุฉ ุงูุฑููุฒ ูุงููุณุงูุงุช
        let formatted = phone.replace(/[^\d]/g, '');
        
        // ุฅุถุงูุฉ ุฑูุฒ ุงูุฏููุฉ ุงูุณุนูุฏูุฉ ุฅุฐุง ูู ููู ููุฌูุฏุงู
        if (formatted.startsWith('05')) {
            formatted = '966' + formatted.substring(1);
        } else if (formatted.startsWith('5')) {
            formatted = '966' + formatted;
        } else if (!formatted.startsWith('966')) {
            formatted = '966' + formatted;
        }
        
        return formatted + '@c.us';
    }

    /**
     * ุงูุชุญูู ูู ุตุญุฉ ุฑูู ุงููุงุชู
     */
    async isValidNumber(phone) {
        if (!this.isReady || !this.client) {
            return false;
        }

        try {
            const formattedNumber = this.formatPhoneNumber(phone);
            const result = await this.client.checkNumberStatus(formattedNumber);
            return result.exists;
        } catch (error) {
            logger.error('ุฎุทุฃ ูู ุงูุชุญูู ูู ุฑูู ุงููุงุชู:', error);
            return false;
        }
    }

    /**
     * ุจุฏุก ูุนุงูุฌ ุงูุฑุณุงุฆู
     */
    startMessageProcessor() {
        if (processingQueue) return;
        
        processingQueue = true;
        this.processMessageQueue();
    }

    /**
     * ูุนุงูุฌุฉ ูุงุฆูุฉ ุงูุชุธุงุฑ ุงูุฑุณุงุฆู
     */
    async processMessageQueue() {
        while (messageQueue.length > 0 && this.isReady) {
            const messageData = messageQueue.shift();
            
            try {
                await this.sendMessage(messageData.to, messageData.message, messageData.options);
                logger.info('ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ');
            } catch (error) {
                logger.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ:', error);
            }
            
            // ุชุฃุฎูุฑ ุจูู ุงูุฑุณุงุฆู
            await this.sleep(1000);
        }
        
        processingQueue = false;
    }

    /**
     * ุฅุถุงูุฉ ุฑุณุงูุฉ ุฅูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ
     */
    queueMessage(to, message, options = {}) {
        messageQueue.push({ to, message, options });
        
        if (this.isReady && !processingQueue) {
            this.startMessageProcessor();
        }
    }

    /**
     * ุงูุญุตูู ุนูู ูุนูููุงุช ุงูุฌูุณุฉ
     */
    getSessionInfo() {
        return {
            isConnected: this.isReady,
            connectionStatus: connectionStatus,
            qrCode: qrCode,
            messageCount: this.messageHistory.length,
            queueLength: messageQueue.length,
            sessionName: this.sessionName
        };
    }

    /**
     * ุฅููุงุก ุงูุฌูุณุฉ
     */
    async closeSession() {
        try {
            if (this.client) {
                await this.client.close();
                logger.info('ุชู ุฅููุงุก ุฌูุณุฉ ุงููุงุชุณุงุจ');
            }
            
            this.isReady = false;
            isConnected = false;
            connectionStatus = 'disconnected';
            
        } catch (error) {
            logger.error('ุฎุทุฃ ูู ุฅููุงุก ุงูุฌูุณุฉ:', error);
        }
    }

    /**
     * ุฏุงูุฉ ูุณุงุนุฏุฉ ููุชุฃุฎูุฑ
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// ุฅูุดุงุก ูุฏูุฑ ุงููุงุชุณุงุจ
const whatsappManager = new WhatsAppManager();

/**
 * API Routes
 */

// ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
app.get('/', (req, res) => {
    res.json({
        service: 'ุฎุฏูุฉ ุงููุงุชุณุงุจ ููุธุงู ุฅุฏุงุฑุฉ ุงูุญุถูุฑ',
        version: '2.0.0',
        status: connectionStatus,
        timestamp: moment().format()
    });
});

// ุจุฏุก ุงูุฌูุณุฉ
app.post('/api/start', async (req, res) => {
    try {
        logger.info('ุทูุจ ุจุฏุก ุฌูุณุฉ ุงููุงุชุณุงุจ');
        
        if (isConnected) {
            return res.json({
                success: true,
                message: 'ุงููุงุชุณุงุจ ูุชุตู ุจุงููุนู',
                data: whatsappManager.getSessionInfo()
            });
        }

        const result = await whatsappManager.startSession();
        
        res.json({
            success: result,
            message: result ? 'ุชู ุจุฏุก ุงูุฌูุณุฉ ุจูุฌุงุญ' : 'ูุดู ูู ุจุฏุก ุงูุฌูุณุฉ',
            data: whatsappManager.getSessionInfo()
        });

    } catch (error) {
        logger.error('ุฎุทุฃ ูู ุจุฏุก ุงูุฌูุณุฉ:', error);
        res.status(500).json({
            success: false,
            message: 'ุฎุทุฃ ูู ุจุฏุก ุงูุฌูุณุฉ',
            error: error.message
        });
    }
});

// ุฅููุงู ุงูุฌูุณุฉ
app.post('/api/stop', async (req, res) => {
    try {
        await whatsappManager.closeSession();
        
        res.json({
            success: true,
            message: 'ุชู ุฅููุงู ุงูุฌูุณุฉ ุจูุฌุงุญ'
        });

    } catch (error) {
        logger.error('ุฎุทุฃ ูู ุฅููุงู ุงูุฌูุณุฉ:', error);
        res.status(500).json({
            success: false,
            message: 'ุฎุทุฃ ูู ุฅููุงู ุงูุฌูุณุฉ',
            error: error.message
        });
    }
});

// ุญุงูุฉ ุงูุฌูุณุฉ
app.get('/api/status', (req, res) => {
    res.json({
        success: true,
        data: whatsappManager.getSessionInfo()
    });
});

// ุงูุญุตูู ุนูู QR Code
app.get('/api/qr', (req, res) => {
    if (qrCode) {
        res.json({
            success: true,
            data: {
                qrCode: qrCode,
                status: connectionStatus
            }
        });
    } else {
        res.json({
            success: false,
            message: 'QR Code ุบูุฑ ูุชููุฑ',
            data: {
                status: connectionStatus
            }
        });
    }
});

// ุฅุฑุณุงู ุฑุณุงูุฉ ูุฑุฏูุฉ
app.post('/api/send', async (req, res) => {
    try {
        const { to, message, type = 'text' } = req.body;

        if (!to || !message) {
            return res.status(400).json({
                success: false,
                message: 'ุฑูู ุงููุงุชู ูุงูุฑุณุงูุฉ ูุทููุจุงู'
            });
        }

        if (!isConnected) {
            return res.status(503).json({
                success: false,
                message: 'ุงููุงุชุณุงุจ ุบูุฑ ูุชุตู'
            });
        }

        const result = await whatsappManager.sendMessage(to, message);

        res.json({
            success: true,
            message: 'ุชู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุจูุฌุงุญ',
            data: {
                messageId: result.id,
                to: to
            }
        });

    } catch (error) {
        logger.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ:', error);
        res.status(500).json({
            success: false,
            message: 'ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ',
            error: error.message
        });
    }
});

// ุฅุฑุณุงู ุฑุณุงุฆู ุฌูุงุนูุฉ
app.post('/api/send-bulk', async (req, res) => {
    try {
        const { recipients, message, options = {} } = req.body;

        if (!recipients || !Array.isArray(recipients) || recipients.length === 0) {
            return res.status(400).json({
                success: false,
                message: 'ูุงุฆูุฉ ุงููุณุชูุจููู ูุทููุจุฉ'
            });
        }

        if (!message) {
            return res.status(400).json({
                success: false,
                message: 'ูุต ุงูุฑุณุงูุฉ ูุทููุจ'
            });
        }

        if (!isConnected) {
            return res.status(503).json({
                success: false,
                message: 'ุงููุงุชุณุงุจ ุบูุฑ ูุชุตู'
            });
        }

        const results = await whatsappManager.sendBulkMessages(recipients, message, options);

        const successCount = results.filter(r => r.success).length;
        const failureCount = results.filter(r => !r.success).length;

        res.json({
            success: true,
            message: `ุชู ุฅุฑุณุงู ${successCount} ุฑุณุงูุฉ ุจูุฌุงุญุ ูุดู ูู ${failureCount} ุฑุณุงูุฉ`,
            data: {
                total: recipients.length,
                success: successCount,
                failed: failureCount,
                results: results
            }
        });

    } catch (error) {
        logger.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงุฆู ุงูุฌูุงุนูุฉ:', error);
        res.status(500).json({
            success: false,
            message: 'ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงุฆู ุงูุฌูุงุนูุฉ',
            error: error.message
        });
    }
});

// ุงูุชุญูู ูู ุตุญุฉ ุฑูู ุงููุงุชู
app.post('/api/validate-number', async (req, res) => {
    try {
        const { phone } = req.body;

        if (!phone) {
            return res.status(400).json({
                success: false,
                message: 'ุฑูู ุงููุงุชู ูุทููุจ'
            });
        }

        if (!isConnected) {
            return res.status(503).json({
                success: false,
                message: 'ุงููุงุชุณุงุจ ุบูุฑ ูุชุตู'
            });
        }

        const isValid = await whatsappManager.isValidNumber(phone);

        res.json({
            success: true,
            data: {
                phone: phone,
                isValid: isValid,
                formatted: whatsappManager.formatPhoneNumber(phone)
            }
        });

    } catch (error) {
        logger.error('ุฎุทุฃ ูู ุงูุชุญูู ูู ุฑูู ุงููุงุชู:', error);
        res.status(500).json({
            success: false,
            message: 'ุฎุทุฃ ูู ุงูุชุญูู ูู ุฑูู ุงููุงุชู',
            error: error.message
        });
    }
});

// ุณุฌู ุงูุฑุณุงุฆู
app.get('/api/messages', (req, res) => {
    const { limit = 50, offset = 0 } = req.query;
    
    const messages = whatsappManager.messageHistory
        .slice(parseInt(offset), parseInt(offset) + parseInt(limit))
        .reverse();

    res.json({
        success: true,
        data: {
            messages: messages,
            total: whatsappManager.messageHistory.length,
            limit: parseInt(limit),
            offset: parseInt(offset)
        }
    });
});

// ุฅุญุตุงุฆูุงุช ุงูุฎุฏูุฉ
app.get('/api/stats', (req, res) => {
    const stats = {
        totalMessages: whatsappManager.messageHistory.length,
        sentMessages: whatsappManager.messageHistory.filter(m => m.direction === 'outgoing').length,
        receivedMessages: whatsappManager.messageHistory.filter(m => m.direction === 'incoming').length,
        queueLength: messageQueue.length,
        uptime: process.uptime(),
        connectionStatus: connectionStatus,
        isConnected: isConnected
    };

    res.json({
        success: true,
        data: stats
    });
});

// ูุนุงูุฌ ุงูุฃุฎุทุงุก ุงูุนุงู
app.use((error, req, res, next) => {
    logger.error('ุฎุทุฃ ูู ุงูุฎุงุฏู:', error);
    res.status(500).json({
        success: false,
        message: 'ุฎุทุฃ ุฏุงุฎูู ูู ุงูุฎุงุฏู',
        error: process.env.NODE_ENV === 'development' ? error.message : 'ุฎุทุฃ ุบูุฑ ูุชููุน'
    });
});

// ูุนุงูุฌ ุงูุทุฑู ุบูุฑ ุงูููุฌูุฏุฉ
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        message: 'ุงูุทุฑูู ุบูุฑ ููุฌูุฏ'
    });
});

/**
 * ุงูููุงู ุงููุฌุฏููุฉ
 */

// ุชูุธูู ุงูุณุฌูุงุช ุงููุฏููุฉ (ููููุงู ูู ููุชุตู ุงูููู)
cron.schedule('0 0 * * *', () => {
    logger.info('ุจุฏุก ุชูุธูู ุงูุณุฌูุงุช ุงููุฏููุฉ...');
    
    // ุงูุงุญุชูุงุธ ุจุขุฎุฑ 1000 ุฑุณุงูุฉ ููุท
    if (whatsappManager.messageHistory.length > 1000) {
        whatsappManager.messageHistory = whatsappManager.messageHistory.slice(-1000);
        logger.info('ุชู ุชูุธูู ุงูุณุฌูุงุช ุงููุฏููุฉ');
    }
});

// ูุญุต ุญุงูุฉ ุงูุงุชุตุงู (ูู 5 ุฏูุงุฆู)
cron.schedule('*/5 * * * *', () => {
    if (isConnected && whatsappManager.client) {
        // ูููู ุฅุถุงูุฉ ูุญุต ุฅุถุงูู ูุญุงูุฉ ุงูุงุชุตุงู ููุง
        logger.info('ูุญุต ุญุงูุฉ ุงูุงุชุตุงู - ูุชุตู');
    } else {
        logger.warn('ูุญุต ุญุงูุฉ ุงูุงุชุตุงู - ุบูุฑ ูุชุตู');
    }
});

/**
 * ุจุฏุก ุงูุฎุงุฏู
 */
const server = app.listen(PORT, HOST, () => {
    logger.info(`๐ ุฎุฏูุฉ ุงููุงุชุณุงุจ ุชุนูู ุนูู ${HOST}:${PORT}`);
    logger.info(`๐ฑ ุฌุงูุฒ ูุงุณุชูุจุงู ุงูุทูุจุงุช...`);
    
    // ุจุฏุก ุงูุฌูุณุฉ ุชููุงุฆูุงู
    setTimeout(() => {
        logger.info('ุจุฏุก ุฌูุณุฉ ุงููุงุชุณุงุจ ุชููุงุฆูุงู...');
        whatsappManager.startSession();
    }, 2000);
});

// ูุนุงูุฌุฉ ุฅููุงุก ุงูุชุทุจูู ุจุดูู ุตุญูุญ
process.on('SIGTERM', async () => {
    logger.info('ุชููู ุฅุดุงุฑุฉ SIGTERMุ ุฅููุงุก ุงูุฎุฏูุฉ...');
    
    await whatsappManager.closeSession();
    server.close(() => {
        logger.info('ุชู ุฅููุงุก ุงูุฎุฏูุฉ ุจูุฌุงุญ');
        process.exit(0);
    });
});

process.on('SIGINT', async () => {
    logger.info('ุชููู ุฅุดุงุฑุฉ SIGINTุ ุฅููุงุก ุงูุฎุฏูุฉ...');
    
    await whatsappManager.closeSession();
    server.close(() => {
        logger.info('ุชู ุฅููุงุก ุงูุฎุฏูุฉ ุจูุฌุงุญ');
        process.exit(0);
    });
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุบูุฑ ุงููุนุงูุฌุฉ
process.on('uncaughtException', (error) => {
    logger.error('ุฎุทุฃ ุบูุฑ ูุนุงูุฌ:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    logger.error('ุฑูุถ ุบูุฑ ูุนุงูุฌ:', reason);
    process.exit(1);
});

module.exports = app;

